name: python Project DRF

on:
  push:
    branches: [ 'main' ]
  pull_request:
    branches: [ 'main' ]

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v3
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          cd ${{ secrets.DEPLOY_DIR }}
          source .venv/bin/activate
          python -m pip install --upgrade pip
       #   pip install flake8
          if [-f requirements.txt]; then pip install -r requirements.txt; fi

      #- name: Lint with flake8
      #  run: |
      #    # stop the build if there are Python syntax errors or undefined names
      #    flake8

  test:
    name: Run tests
    runs-on: ubuntu-latest
    needs: lint

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports: ['5432:5432']
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |        
        cd ${{ secrets.DEPLOY_DIR }}
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Wait for PostgresSQL
      run: |
        until pg_isready -h localhost -p 5432 -U test_user; do
          sleep_1
        done

#    - name: Cache pip
#      uses: actions/cache@v3
#      with:
#        path: ~/.cache/pip
#        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
#        restore-keys: |
#          ${{ runner.os }}-pip-

    - name: Run migrations
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}

      run: python manage.py migrate

    - name: Run tests
      run: python manage.py test

  build:
    run-on: ubuntu-latest
    needs: test

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Log in Docker hub
        run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/courses:${{ github.sha }} .

      - name: Push Docker image in Docker hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/courses:${{ github.sha }}

  deploy:
    name: Deploy to server
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.1
        with:
          ssh-private-key: ${{ secrets.SECRET_KEY }}

      - name: Deploy to Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/courses:${{ github.sha }}
            docker stop courses || true
            docker rm courses || true
            docker run -d --name courses -p 80:8000 ${{ secrets.DOCKER_HUB_USERNAME }}/courses:${{ github.sha }}
          EOF