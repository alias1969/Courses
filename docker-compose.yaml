version: '3.9'
services:

  db:
    image: postgres:16.0
    restart: on-failure
    container_name: postgres
    environment:
      - POSTGRES_DB=${NAME}
      - POSTGRES_USER=${DBUSER}
      - POSTGRES_PASSWORD=${PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - '5433:5432'
    env_file:
      - .env
    healthcheck:
      test: ['CMD-SHELL', '-c', 'pg_isready -U ${DBUSER}']
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

  redis:
    image: redis:latest
    container_name: redis
    command: sh -c "redis-server"
    volumes:
      - .data.cache:/data
    ports:
      - '6380:6379'

  app:
    build: .
    env_file:
      - .env
    container_name: app
    tty: true
    ports:
      - '8000:8000'
    environment:
      - POETRY_VIRTUALENVS_CREATE=false
    command: sh -c "python3 manage.py collectstatic --no-input && python3 manage.py migrate && gunicorn config.wsgi:application --bind 0.0.0.0:8000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - .:/app
      - static_files:/app/static

  celery:
    build: .
    container_name: celery
    tty: true
    command: sh -c 'celery -A config worker --loglevel=info'
    restart: on-failure
    volumes:
      - .:/app
    depends_on:
      - redis
    env_file:
      - .env

  celery-beat:
    build: .
    container_name: beat
    tty: true
    command: sh -c "sleep 30 && celery -A config beat --loglevel=info"
    restart: on-failure
    volumes:
      - .:/app
    depends_on:
      - app
      - db
      - redis
    env_file:
      - .env

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx
    ports:
      - '80:80'
    volumes:
      - static_files:/app/static
    depends_on:
      - app


volumes:
  static_files:
  postgres_data:
  .data.cash:
